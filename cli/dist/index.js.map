{"version":3,"sources":["../src/index.ts","../src/commands/evals.ts","../schemas/test-schema.ts","../schemas/environment-schema.ts","../src/runner/test-runner.ts","../src/server/tests-router.ts","../src/utils/env-resolver.ts"],"sourcesContent":["import { Command } from 'commander';\nimport { evalsCommand } from './commands/evals.js';\n\nconst program = new Command();\n\nprogram\n  .name('mcpjam')\n  .description('MCPJam CLI for programmatic MCP testing')\n  .version('1.0.0');\n\nprogram.addCommand(evalsCommand);\n\nprogram.parse();","import { Command } from 'commander';\nimport { readFile } from 'fs/promises';\nimport { resolve } from 'path';\nimport { TestsFileSchema } from '../../schemas/test-schema.js';\nimport { EnvironmentFileSchema } from '../../schemas/environment-schema.js';\nimport { runTests } from '../runner/test-runner.js';\nimport { resolveEnvironmentVariables } from '../utils/env-resolver.js';\n\nexport const evalsCommand = new Command('evals');\n\nevalsCommand\n  .description('Run MCP evaluations')\n  .command('run')\n  .description('Run tests against MCP servers')\n  .requiredOption('-t, --tests <file>', 'Path to tests JSON file')\n  .requiredOption('-e, --environment <file>', 'Path to environment JSON file')\n  .action(async (options) => {\n    try {\n      console.log('MCPJAM Evals v1.0.0\\n');\n\n      // Read and parse test file\n      const testsContent = await readFile(resolve(options.tests), 'utf8');\n      const testsData = TestsFileSchema.parse(JSON.parse(testsContent));\n\n      // Read and parse environment file  \n      const envContent = await readFile(resolve(options.environment), 'utf8');\n      const envData = EnvironmentFileSchema.parse(JSON.parse(envContent));\n\n      // Resolve environment variables\n      const resolvedEnv = resolveEnvironmentVariables(envData);\n\n      console.log(`Running ${testsData.tests.length} tests...\\n`);\n\n      // Run tests\n      const results = await runTests(testsData.tests, resolvedEnv);\n\n      // Display results\n      console.log(`\\nResults: ${results.passed} passed, ${results.failed} failed (${results.duration}s total)\\n`);\n\n      // Exit with error code if any tests failed\n      if (results.failed > 0) {\n        process.exit(1);\n      }\n    } catch (error) {\n      console.error('❌ Error:', error instanceof Error ? error.message : String(error));\n      process.exit(1);\n    }\n  });","import { z } from \"zod\";\n\nexport const ModelSchema = z.object({\n  id: z.string(),\n  provider: z.enum([\"openai\", \"anthropic\", \"deepseek\", \"ollama\"]),\n});\n\nexport const AdvancedConfigSchema = z.object({\n  instructions: z.string().optional(),\n  temperature: z.number().min(0).max(2).optional(),\n  maxSteps: z.number().positive().optional(),\n  toolChoice: z.enum([\"auto\", \"required\", \"none\"]).optional(),\n});\n\nexport const TestSchema = z.object({\n  title: z.string(),\n  prompt: z.string(),\n  expectedTools: z.array(z.string()),\n  model: ModelSchema,\n  selectedServers: z.array(z.string()),\n  advancedConfig: AdvancedConfigSchema.optional(),\n});\n\nexport const TestsFileSchema = z.object({\n  tests: z.array(TestSchema),\n});\n\nexport type Model = z.infer<typeof ModelSchema>;\nexport type AdvancedConfig = z.infer<typeof AdvancedConfigSchema>;\nexport type Test = z.infer<typeof TestSchema>;\nexport type TestsFile = z.infer<typeof TestsFileSchema>;","import { z } from \"zod\";\n\nexport const MCPServerConfigSchema = z.union([\n  // STDIO server\n  z.object({\n    command: z.string(),\n    args: z.array(z.string()).optional(),\n    env: z.record(z.string()).optional(),\n  }),\n  // HTTP server\n  z.object({\n    url: z.string().url(),\n    headers: z.record(z.string()).optional(),\n  }),\n]);\n\nexport const EnvironmentFileSchema = z.object({\n  mcpServers: z.record(MCPServerConfigSchema),\n  providerApiKeys: z.object({\n    anthropic: z.string().optional(),\n    openai: z.string().optional(),\n    deepseek: z.string().optional(),\n  }).optional(),\n});\n\nexport type MCPServerConfig = z.infer<typeof MCPServerConfigSchema>;\nexport type EnvironmentFile = z.infer<typeof EnvironmentFileSchema>;","import { createServer } from 'http';\nimport { serve } from '@hono/node-server';\nimport { Hono } from 'hono';\nimport type { Test } from '../../schemas/test-schema.js';\nimport type { EnvironmentFile } from '../../schemas/environment-schema.js';\nimport { createTestsRouter } from '../server/tests-router.js';\n\nexport interface TestResult {\n  testId: string;\n  title: string;\n  passed: boolean;\n  calledTools: string[];\n  missingTools: string[];\n  unexpectedTools: string[];\n  error?: string;\n  duration: number;\n}\n\nexport interface TestRunResults {\n  passed: number;\n  failed: number;\n  duration: string;\n  results: TestResult[];\n}\n\nexport async function runTests(tests: Test[], environment: EnvironmentFile): Promise<TestRunResults> {\n  const startTime = Date.now();\n  \n  // Start temporary backend server\n  const app = new Hono();\n  app.route('/mcp/tests', createTestsRouter());\n  \n  const server = serve({\n    fetch: app.fetch,\n    port: 0, // Use random available port\n  });\n\n  const port = (server as any).port || 3000;\n  \n  try {\n    // Convert tests to backend format\n    const backendTests = tests.map((test, index) => ({\n      id: `test_${index}`,\n      title: test.title,\n      prompt: test.prompt,\n      expectedTools: test.expectedTools,\n      model: test.model,\n      selectedServers: test.selectedServers,\n    }));\n\n    // Convert environment to backend format\n    const backendServers = Object.fromEntries(\n      Object.entries(environment.mcpServers).map(([name, config]) => [\n        name,\n        convertServerConfig(config),\n      ])\n    );\n\n    const payload = {\n      tests: backendTests,\n      allServers: backendServers,\n      providerApiKeys: environment.providerApiKeys || {},\n    };\n\n    // Make request to backend\n    const response = await fetch(`http://localhost:${port}/mcp/tests/run-all`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status} ${response.statusText}`);\n    }\n\n    // Process streaming response\n    const results = await processStreamingResults(response, tests);\n    \n    const duration = ((Date.now() - startTime) / 1000).toFixed(1);\n    \n    return {\n      passed: results.filter(r => r.passed).length,\n      failed: results.filter(r => !r.passed).length,\n      duration,\n      results,\n    };\n    \n  } finally {\n    server.close();\n  }\n}\n\nfunction convertServerConfig(config: any): any {\n  if ('command' in config) {\n    // STDIO server\n    return {\n      command: config.command,\n      args: config.args || [],\n      env: config.env || {},\n    };\n  } else {\n    // HTTP server  \n    return {\n      url: config.url,\n      headers: config.headers || {},\n    };\n  }\n}\n\nasync function processStreamingResults(response: Response, tests: Test[]): Promise<TestResult[]> {\n  const results: TestResult[] = [];\n  const reader = response.body?.getReader();\n  const decoder = new TextDecoder();\n  \n  if (!reader) {\n    throw new Error('No response body');\n  }\n\n  let buffer = '';\n  \n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    \n    buffer += decoder.decode(value, { stream: true });\n    \n    // Process complete lines\n    const lines = buffer.split('\\n');\n    buffer = lines.pop() || '';\n    \n    for (const line of lines) {\n      if (line.startsWith('data: ')) {\n        const data = line.slice(6);\n        if (data === '[DONE]') break;\n        \n        try {\n          const event = JSON.parse(data);\n          \n          if (event.type === 'result') {\n            const testIndex = parseInt(event.testId.split('_')[1]);\n            const test = tests[testIndex];\n            const testStart = Date.now();\n            \n            const result: TestResult = {\n              testId: event.testId,\n              title: test?.title || 'Unknown Test',\n              passed: event.passed,\n              calledTools: event.calledTools || [],\n              missingTools: event.missingTools || [],\n              unexpectedTools: event.unexpectedTools || [],\n              error: event.error,\n              duration: 0, // We don't have individual timing from the stream\n            };\n            \n            results.push(result);\n            \n            // Print result immediately\n            if (result.passed) {\n              console.log(`✅ ${result.title}`);\n              console.log(`   Called tools: ${result.calledTools.join(', ') || 'none'}`);\n            } else {\n              console.log(`❌ ${result.title}`);\n              if (result.error) {\n                console.log(`   Error: ${result.error}`);\n              } else {\n                console.log(`   Called tools: ${result.calledTools.join(', ') || 'none'}`);\n                if (result.missingTools.length > 0) {\n                  console.log(`   Missing: ${result.missingTools.join(', ')}`);\n                }\n                if (result.unexpectedTools.length > 0) {\n                  console.log(`   Unexpected: ${result.unexpectedTools.join(', ')}`);\n                }\n              }\n            }\n          } else if (event.type === 'trace_step') {\n            // Optional: could show progress steps\n          }\n        } catch (e) {\n          // Ignore malformed JSON\n        }\n      }\n    }\n  }\n  \n  return results;\n}","import { Hono } from \"hono\";\nimport { createAnthropic } from \"@ai-sdk/anthropic\";\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { createOllama } from \"ollama-ai-provider\";\nimport { MCPClient } from \"@mastra/mcp\";\nimport { Agent } from \"@mastra/core/agent\";\n\n// Simplified version of the server's tests router for CLI use\nexport function createTestsRouter() {\n  const tests = new Hono();\n\n  tests.post(\"/run-all\", async (c) => {\n    const encoder = new TextEncoder();\n    try {\n      const body = await c.req.json();\n      const testsInput = (body?.tests || []) as Array<{\n        id: string;\n        title: string;\n        prompt: string;\n        expectedTools: string[];\n        model: { id: string; provider: string };\n        selectedServers?: string[];\n      }>;\n      const allServers = body?.allServers || {};\n      const providerApiKeys = body?.providerApiKeys || {};\n\n      if (!Array.isArray(testsInput) || testsInput.length === 0) {\n        return c.json({ success: false, error: \"No tests provided\" }, 400);\n      }\n\n      function createModel(model: { id: string; provider: string }) {\n        switch (model.provider) {\n          case \"anthropic\":\n            return createAnthropic({\n              apiKey: providerApiKeys?.anthropic || process.env.ANTHROPIC_API_KEY || \"\",\n            })(model.id);\n          case \"openai\":\n            return createOpenAI({\n              apiKey: providerApiKeys?.openai || process.env.OPENAI_API_KEY || \"\",\n            })(model.id);\n          case \"deepseek\":\n            return createOpenAI({\n              apiKey: providerApiKeys?.deepseek || process.env.DEEPSEEK_API_KEY || \"\",\n              baseURL: \"https://api.deepseek.com/v1\",\n            })(model.id);\n          case \"ollama\":\n            return createOllama({\n              baseURL: process.env.OLLAMA_BASE_URL || \"http://localhost:11434\",\n            })(model.id, { simulateStreaming: true });\n          default:\n            throw new Error(`Unsupported provider: ${model.provider}`);\n        }\n      }\n\n      const readableStream = new ReadableStream({\n        async start(controller) {\n          let failed = false;\n\n          for (const test of testsInput) {\n            const calledTools = new Set<string>();\n            const expectedSet = new Set<string>(test.expectedTools || []);\n            let client: MCPClient | null = null;\n\n            try {\n              // Build servers for this test\n              let serverConfigs = {};\n              if (test.selectedServers && test.selectedServers.length > 0) {\n                for (const name of test.selectedServers) {\n                  if (allServers[name]) serverConfigs[name] = allServers[name];\n                }\n              } else {\n                serverConfigs = allServers;\n              }\n\n              if (Object.keys(serverConfigs).length === 0) {\n                throw new Error(\"No valid MCP server configs for test\");\n              }\n\n              client = new MCPClient({ servers: serverConfigs });\n              const model = createModel(test.model);\n              const agent = new Agent({\n                name: `TestAgent-${test.id}`,\n                instructions: \"You are a helpful assistant with access to MCP tools\",\n                model,\n              });\n\n              const toolsets = await client.getToolsets();\n              const stream = await agent.stream(\n                [{ role: \"user\", content: test.prompt || \"\" }] as any,\n                {\n                  maxSteps: 10,\n                  toolsets,\n                  onStepFinish: ({ text, toolCalls, toolResults }) => {\n                    // Accumulate tool names\n                    (toolCalls || []).forEach((c: any) => {\n                      const toolName = c?.name || c?.toolName;\n                      if (toolName) {\n                        calledTools.add(toolName);\n                      }\n                    });\n                  },\n                }\n              );\n\n              // Drain the stream\n              for await (const _ of stream.textStream) {\n                // no-op\n              }\n\n              const called = Array.from(calledTools);\n              const missing = Array.from(expectedSet).filter(\n                (t) => !calledTools.has(t)\n              );\n              const unexpected = called.filter((t) => !expectedSet.has(t));\n              const passed = missing.length === 0 && unexpected.length === 0;\n\n              if (!passed) failed = true;\n\n              controller.enqueue(\n                encoder.encode(\n                  `data: ${JSON.stringify({\n                    type: \"result\",\n                    testId: test.id,\n                    passed,\n                    calledTools: called,\n                    missingTools: missing,\n                    unexpectedTools: unexpected,\n                  })}\\n\\n`\n                )\n              );\n            } catch (err) {\n              failed = true;\n              controller.enqueue(\n                encoder.encode(\n                  `data: ${JSON.stringify({\n                    type: \"result\",\n                    testId: test.id,\n                    passed: false,\n                    error: (err as Error)?.message,\n                  })}\\n\\n`\n                )\n              );\n            } finally {\n              try {\n                await client?.disconnect();\n              } catch {}\n            }\n          }\n\n          controller.enqueue(\n            encoder.encode(\n              `data: ${JSON.stringify({\n                type: \"run_complete\",\n                passed: !failed,\n              })}\\n\\n`\n            )\n          );\n          controller.enqueue(encoder.encode(`data: [DONE]\\n\\n`));\n          controller.close();\n        },\n      });\n\n      return new Response(readableStream, {\n        headers: {\n          \"Content-Type\": \"text/event-stream\",\n          \"Cache-Control\": \"no-cache\",\n          Connection: \"keep-alive\",\n        },\n      });\n    } catch (err) {\n      return c.json(\n        { success: false, error: (err as Error)?.message || \"Unknown error\" },\n        500\n      );\n    }\n  });\n\n  return tests;\n}","import type { EnvironmentFile } from '../../schemas/environment-schema.js';\n\nexport function resolveEnvironmentVariables(env: EnvironmentFile): EnvironmentFile {\n  return {\n    ...env,\n    mcpServers: Object.fromEntries(\n      Object.entries(env.mcpServers).map(([name, config]) => [\n        name,\n        resolveServerConfig(config),\n      ])\n    ),\n    providerApiKeys: env.providerApiKeys ? {\n      anthropic: resolveTemplate(env.providerApiKeys.anthropic),\n      openai: resolveTemplate(env.providerApiKeys.openai),\n      deepseek: resolveTemplate(env.providerApiKeys.deepseek),\n    } : undefined,\n  };\n}\n\nfunction resolveServerConfig(config: any): any {\n  if ('command' in config) {\n    // STDIO server\n    return {\n      ...config,\n      env: config.env ? Object.fromEntries(\n        Object.entries(config.env).map(([key, value]) => [\n          key,\n          resolveTemplate(value as string),\n        ])\n      ) : undefined,\n    };\n  } else {\n    // HTTP server\n    return {\n      ...config,\n      headers: config.headers ? Object.fromEntries(\n        Object.entries(config.headers).map(([key, value]) => [\n          key,\n          resolveTemplate(value as string),\n        ])\n      ) : undefined,\n    };\n  }\n}\n\nfunction resolveTemplate(value: string | undefined): string | undefined {\n  if (!value) return value;\n  \n  return value.replace(/\\$\\{([^}]+)\\}/g, (match, envVar) => {\n    const resolved = process.env[envVar];\n    if (resolved === undefined) {\n      console.warn(`⚠️  Warning: Environment variable ${envVar} is not set`);\n      return match;\n    }\n    return resolved;\n  });\n}"],"mappings":"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","names":["Command","z","Hono","createModel","c","Hono","Command"]}