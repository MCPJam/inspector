{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcelo/mcpjam-inspector/src/lib/mcp-utils.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { MCPClient } from \"@mastra/mcp\";\nimport { MastraMCPServerDefinition } from \"./types\";\n\nexport interface ValidationResult {\n  success: boolean;\n  config?: MastraMCPServerDefinition;\n  error?: NextResponse;\n}\n\nexport interface MultipleValidationResult {\n  success: boolean;\n  validConfigs?: Record<string, MastraMCPServerDefinition>;\n  errors?: Record<string, string>;\n  error?: NextResponse;\n}\n\nexport function validateServerConfig(serverConfig: any): ValidationResult {\n  if (!serverConfig) {\n    return {\n      success: false,\n      error: NextResponse.json(\n        { error: \"Server configuration is required\" },\n        { status: 400 },\n      ),\n    };\n  }\n\n  // Validate and prepare config\n  const config = { ...serverConfig };\n\n  // Validate and convert URL if provided\n  if (config.url) {\n    try {\n      // Convert string URL to URL object if needed\n      if (typeof config.url === \"string\") {\n        config.url = new URL(config.url);\n      } else if (typeof config.url === \"object\" && !config.url.href) {\n        return {\n          success: false,\n          error: NextResponse.json(\n            { error: \"Invalid URL configuration\" },\n            { status: 400 },\n          ),\n        };\n      }\n\n      // Handle OAuth authentication for HTTP servers\n      if (config.oauth?.access_token) {\n        const authHeaders = {\n          Authorization: `Bearer ${config.oauth.access_token}`,\n          ...(config.requestInit?.headers || {}),\n        };\n\n        config.requestInit = {\n          ...config.requestInit,\n          headers: authHeaders,\n        };\n\n        // For SSE connections, add eventSourceInit with OAuth headers\n        config.eventSourceInit = {\n          fetch(input: Request | URL | string, init?: RequestInit) {\n            const headers = new Headers(init?.headers || {});\n\n            // Add OAuth authorization header\n            headers.set(\n              \"Authorization\",\n              `Bearer ${config.oauth!.access_token}`,\n            );\n\n            // Copy other headers from requestInit\n            if (config.requestInit?.headers) {\n              const requestHeaders = new Headers(config.requestInit.headers);\n              requestHeaders.forEach((value, key) => {\n                if (key.toLowerCase() !== \"authorization\") {\n                  headers.set(key, value);\n                }\n              });\n            }\n\n            return fetch(input, {\n              ...init,\n              headers,\n            });\n          },\n        };\n      } else if (config.requestInit?.headers) {\n        // For SSE connections without OAuth, add eventSourceInit if requestInit has custom headers\n        config.eventSourceInit = {\n          fetch(input: Request | URL | string, init?: RequestInit) {\n            const headers = new Headers(init?.headers || {});\n\n            // Copy headers from requestInit\n            const requestHeaders = new Headers(config.requestInit.headers);\n            requestHeaders.forEach((value, key) => {\n              headers.set(key, value);\n            });\n\n            return fetch(input, {\n              ...init,\n              headers,\n            });\n          },\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: NextResponse.json(\n          { error: `Invalid URL format: ${error}` },\n          { status: 400 },\n        ),\n      };\n    }\n  }\n\n  return {\n    success: true,\n    config,\n  };\n}\n\nexport const validateMultipleServerConfigs = (\n  serverConfigs: Record<string, MastraMCPServerDefinition>,\n): MultipleValidationResult => {\n  if (!serverConfigs || Object.keys(serverConfigs).length === 0) {\n    return {\n      success: false,\n      error: NextResponse.json(\n        { error: \"At least one server configuration is required\" },\n        { status: 400 },\n      ),\n    };\n  }\n\n  const validConfigs: Record<string, MastraMCPServerDefinition> = {};\n  const errors: Record<string, string> = {};\n  let hasErrors = false;\n\n  // Validate each server configuration\n  for (const [serverName, serverConfig] of Object.entries(serverConfigs)) {\n    const validationResult = validateServerConfig(serverConfig);\n\n    if (validationResult.success && validationResult.config) {\n      validConfigs[serverName] = validationResult.config;\n    } else {\n      hasErrors = true;\n      // Extract error message from the NextResponse\n      let errorMessage = \"Validation failed\";\n      if (validationResult.error) {\n        try {\n          const errorBody = validationResult.error.body;\n          if (\n            errorBody &&\n            typeof errorBody === \"object\" &&\n            \"error\" in errorBody\n          ) {\n            errorMessage = errorBody.error as string;\n          }\n        } catch {\n          errorMessage = \"Validation failed\";\n        }\n      }\n      errors[serverName] = errorMessage;\n    }\n  }\n\n  // If all configs are valid, return success\n  if (!hasErrors) {\n    return {\n      success: true,\n      validConfigs,\n    };\n  }\n\n  // If some configs are valid but others failed, return partial success\n  if (Object.keys(validConfigs).length > 0) {\n    return {\n      success: false,\n      validConfigs,\n      errors,\n    };\n  }\n\n  // If all configs failed, return error\n  return {\n    success: false,\n    errors,\n    error: NextResponse.json(\n      {\n        error: \"All server configurations failed validation\",\n        details: errors,\n      },\n      { status: 400 },\n    ),\n  };\n};\n\nexport function createMCPClient(\n  config: MastraMCPServerDefinition,\n  id: string,\n): MCPClient {\n  return new MCPClient({\n    id,\n    servers: {\n      server: config,\n    },\n  });\n}\n\nexport function createMCPClientWithMultipleConnections(\n  serverConfigs: Record<string, MastraMCPServerDefinition>,\n): MCPClient {\n  // Normalize server config names\n  const normalizedConfigs: Record<string, MastraMCPServerDefinition> = {};\n  for (const [serverName, config] of Object.entries(serverConfigs)) {\n    const normalizedName = normalizeServerConfigName(serverName);\n    normalizedConfigs[normalizedName] = config;\n  }\n\n  return new MCPClient({\n    id: `chat-${Date.now()}`,\n    servers: normalizedConfigs,\n  });\n}\n\nexport function normalizeServerConfigName(serverName: string): string {\n  // Convert to lowercase and replace spaces/hyphens with underscores\n  return serverName\n    .toLowerCase()\n    .replace(/[\\s\\-]+/g, \"_\")\n    .replace(/[^a-z0-9_]/g, \"\");\n}\n\nexport function createErrorResponse(\n  message: string,\n  details?: string,\n  status: number = 500,\n): NextResponse {\n  return NextResponse.json(\n    {\n      error: message,\n      details: details || \"Unknown error\",\n    },\n    { status },\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcelo/mcpjam-inspector/src/app/api/mcp/connect/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { validateServerConfig, createMCPClient } from \"@/lib/mcp-utils\";\n\nexport async function POST(request: NextRequest) {\n  const { serverConfig } = await request.json();\n\n  const validation = validateServerConfig(serverConfig);\n  if (!validation.success) {\n    return validation.error!;\n  }\n\n  let client;\n  try {\n    client = createMCPClient(validation.config!, `test-${Date.now()}`);\n  } catch (error) {\n    return NextResponse.json(\n      {\n        success: false,\n        error: `Failed to create a MCP client. Please double check your server configuration: ${JSON.stringify(serverConfig)}`,\n        details: error instanceof Error ? error.message : \"Unknown error\",\n      },\n      { status: 500 },\n    );\n  }\n\n  try {\n    await client.getTools();\n    await client.disconnect();\n    return NextResponse.json({\n      success: true,\n    });\n  } catch (error) {\n    return NextResponse.json(\n      {\n        success: false,\n        error: `MCP configuration is invalid. Please double check your server configuration: ${JSON.stringify(serverConfig)}`,\n        details: error instanceof Error ? error.message : \"Unknown error\",\n      },\n      { status: 500 },\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,QAAQ,IAAI;IAE3C,MAAM,aAAa,CAAA,GAAA,4HAAA,CAAA,uBAAoB,AAAD,EAAE;IACxC,IAAI,CAAC,WAAW,OAAO,EAAE;QACvB,OAAO,WAAW,KAAK;IACzB;IAEA,IAAI;IACJ,IAAI;QACF,SAAS,CAAA,GAAA,4HAAA,CAAA,kBAAe,AAAD,EAAE,WAAW,MAAM,EAAG,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;IACnE,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,CAAC,8EAA8E,EAAE,KAAK,SAAS,CAAC,eAAe;YACtH,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,OAAO,QAAQ;QACrB,MAAM,OAAO,UAAU;QACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,CAAC,6EAA6E,EAAE,KAAK,SAAS,CAAC,eAAe;YACrH,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}