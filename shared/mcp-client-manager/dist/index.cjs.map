{"version":3,"sources":["../index.ts"],"sourcesContent":["import { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport type { ClientOptions } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport { SSEClientTransport } from \"@modelcontextprotocol/sdk/client/sse.js\";\nimport type { SSEClientTransportOptions } from \"@modelcontextprotocol/sdk/client/sse.js\";\nimport {\n  getDefaultEnvironment,\n  StdioClientTransport,\n} from \"@modelcontextprotocol/sdk/client/stdio.js\";\nimport { StreamableHTTPClientTransport } from \"@modelcontextprotocol/sdk/client/streamableHttp.js\";\nimport type { StreamableHTTPClientTransportOptions } from \"@modelcontextprotocol/sdk/client/streamableHttp.js\";\nimport { DEFAULT_REQUEST_TIMEOUT_MSEC } from \"@modelcontextprotocol/sdk/shared/protocol.js\";\nimport type { RequestOptions } from \"@modelcontextprotocol/sdk/shared/protocol.js\";\nimport type { Transport } from \"@modelcontextprotocol/sdk/shared/transport.js\";\nimport {\n  CallToolResultSchema,\n  ElicitRequestSchema,\n  ResourceListChangedNotificationSchema,\n  ResourceUpdatedNotificationSchema,\n  PromptListChangedNotificationSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport type {\n  ElicitRequest,\n  ElicitResult,\n} from \"@modelcontextprotocol/sdk/types.js\";\ntype ClientCapabilityOptions = NonNullable<ClientOptions[\"capabilities\"]>;\n\ntype BaseServerConfig = {\n  capabilities?: ClientCapabilityOptions;\n  timeout?: number;\n  version?: string;\n  onError?: (error: unknown) => void;\n};\n\ntype StdioServerConfig = BaseServerConfig & {\n  command: string;\n  args?: string[];\n  env?: Record<string, string>;\n\n  url?: never;\n  requestInit?: never;\n  eventSourceInit?: never;\n  authProvider?: never;\n  reconnectionOptions?: never;\n  sessionId?: never;\n  preferSSE?: never;\n};\n\ntype HttpServerConfig = BaseServerConfig & {\n  url: URL;\n  requestInit?: StreamableHTTPClientTransportOptions[\"requestInit\"];\n  eventSourceInit?: SSEClientTransportOptions[\"eventSourceInit\"];\n  authProvider?: StreamableHTTPClientTransportOptions[\"authProvider\"];\n  reconnectionOptions?: StreamableHTTPClientTransportOptions[\"reconnectionOptions\"];\n  sessionId?: StreamableHTTPClientTransportOptions[\"sessionId\"];\n  preferSSE?: boolean;\n\n  command?: never;\n  args?: never;\n  env?: never;\n};\n\nexport type MCPServerConfig = StdioServerConfig | HttpServerConfig;\n\nexport type MCPClientManagerConfig = Record<string, MCPServerConfig>;\n\ntype NotificationSchema = Parameters<Client[\"setNotificationHandler\"]>[0];\ntype NotificationHandler = Parameters<Client[\"setNotificationHandler\"]>[1];\n\ninterface ManagedClientState {\n  config: MCPServerConfig;\n  timeout: number;\n  client?: Client;\n  transport?: Transport;\n  promise?: Promise<Client>;\n}\n\n// Pending state is tracked inside ManagedClientState.promise\n\ntype ClientRequestOptions = RequestOptions;\ntype CallToolOptions = RequestOptions;\n\ntype ListResourcesParams = Parameters<Client[\"listResources\"]>[0];\ntype ListResourceTemplatesParams = Parameters<\n  Client[\"listResourceTemplates\"]\n>[0];\ntype ReadResourceParams = Parameters<Client[\"readResource\"]>[0];\ntype SubscribeResourceParams = Parameters<Client[\"subscribeResource\"]>[0];\ntype UnsubscribeResourceParams = Parameters<Client[\"unsubscribeResource\"]>[0];\ntype ListPromptsParams = Parameters<Client[\"listPrompts\"]>[0];\ntype GetPromptParams = Parameters<Client[\"getPrompt\"]>[0];\ntype ListToolsResult = Awaited<ReturnType<Client[\"listTools\"]>>;\n\nexport type MCPConnectionStatus = \"connected\" | \"connecting\" | \"disconnected\";\ntype ServerSummary = {\n  id: string;\n  status: MCPConnectionStatus;\n  config?: MCPServerConfig;\n};\n\nexport type ExecuteToolArguments = Record<string, unknown>;\nexport type ElicitationHandler = (\n  params: ElicitRequest[\"params\"],\n) => Promise<ElicitResult> | ElicitResult;\n\nexport class MCPClientManager {\n  private readonly clientStates = new Map<string, ManagedClientState>();\n  private readonly notificationHandlers = new Map<\n    string,\n    Map<NotificationSchema, Set<NotificationHandler>>\n  >();\n  private readonly elicitationHandlers = new Map<string, ElicitationHandler>();\n  private readonly toolsMetadataCache = new Map<string, Map<string, any>>();\n  private readonly defaultClientVersion: string;\n  private readonly defaultCapabilities: ClientCapabilityOptions;\n  private readonly defaultTimeout: number;\n\n  constructor(\n    servers: MCPClientManagerConfig = {},\n    options: {\n      defaultClientVersion?: string;\n      defaultCapabilities?: ClientCapabilityOptions;\n      defaultTimeout?: number;\n    } = {},\n  ) {\n    this.defaultClientVersion = options.defaultClientVersion ?? \"1.0.0\";\n    this.defaultCapabilities = { ...(options.defaultCapabilities ?? {}) };\n    this.defaultTimeout =\n      options.defaultTimeout ?? DEFAULT_REQUEST_TIMEOUT_MSEC;\n\n    for (const [id, config] of Object.entries(servers)) {\n      void this.connectToServer(id, config);\n    }\n  }\n\n  listServers(): string[] {\n    return Array.from(this.clientStates.keys());\n  }\n\n  hasServer(serverId: string): boolean {\n    return this.clientStates.has(serverId);\n  }\n\n  getServerSummaries(): ServerSummary[] {\n    return Array.from(this.clientStates.entries()).map(\n      ([serverId, state]) => ({\n        id: serverId,\n        status: this.resolveConnectionStatus(state),\n        config: state.config,\n      }),\n    );\n  }\n\n  getConnectionStatus(serverId: string): MCPConnectionStatus {\n    return this.resolveConnectionStatus(this.clientStates.get(serverId));\n  }\n\n  getServerConfig(serverId: string): MCPServerConfig | undefined {\n    return this.clientStates.get(serverId)?.config;\n  }\n\n  async connectToServer(\n    serverId: string,\n    config: MCPServerConfig,\n  ): Promise<Client> {\n    if (this.clientStates.has(serverId)) {\n      throw new Error(`MCP server \"${serverId}\" is already connected.`);\n    }\n    const timeout = this.getTimeout(config);\n    const state = this.clientStates.get(serverId) ?? {\n      config,\n      timeout,\n    };\n    // Update config/timeout on every call\n    state.config = config;\n    state.timeout = timeout;\n    // If already connected, return the client\n    if (state.client) {\n      this.clientStates.set(serverId, state);\n      return state.client;\n    }\n    // If connection is in-flight, reuse the promise\n    if (state.promise) {\n      this.clientStates.set(serverId, state);\n      return state.promise;\n    }\n\n    const connectionPromise = (async () => {\n      const client = new Client(\n        {\n          name: serverId,\n          version: config.version ?? this.defaultClientVersion,\n        },\n        {\n          capabilities: this.buildCapabilities(config),\n        },\n      );\n\n      this.applyNotificationHandlers(serverId, client);\n      this.applyElicitationHandler(serverId, client);\n\n      if (config.onError) {\n        client.onerror = (error) => {\n          config.onError?.(error);\n        };\n      }\n\n      client.onclose = () => {\n        this.resetState(serverId);\n      };\n\n      let transport: Transport;\n      if (this.isStdioConfig(config)) {\n        transport = await this.connectViaStdio(client, config, timeout);\n      } else {\n        transport = await this.connectViaHttp(\n          serverId,\n          client,\n          config,\n          timeout,\n        );\n      }\n\n      state.client = client;\n      state.transport = transport;\n      // clear pending\n      state.promise = undefined;\n      this.clientStates.set(serverId, state);\n\n      return client;\n    })().catch((error) => {\n      // Clear pending but keep config so the server remains registered\n      state.promise = undefined;\n      state.client = undefined;\n      state.transport = undefined;\n      this.clientStates.set(serverId, state);\n      throw error;\n    });\n\n    state.promise = connectionPromise;\n    this.clientStates.set(serverId, state);\n    return connectionPromise;\n  }\n\n  async disconnectServer(serverId: string): Promise<void> {\n    const client = this.getClientById(serverId);\n    try {\n      await client.close();\n    } finally {\n      if (client.transport) {\n        await this.safeCloseTransport(client.transport);\n      }\n      this.resetState(serverId);\n    }\n  }\n\n  removeServer(serverId: string): void {\n    this.resetState(serverId);\n    this.notificationHandlers.delete(serverId);\n    this.elicitationHandlers.delete(serverId);\n  }\n\n  async disconnectAllServers(): Promise<void> {\n    const serverIds = this.listServers();\n    await Promise.all(\n      serverIds.map((serverId) => this.disconnectServer(serverId)),\n    );\n\n    for (const serverId of serverIds) {\n      this.resetState(serverId);\n      this.notificationHandlers.delete(serverId);\n      this.elicitationHandlers.delete(serverId);\n    }\n  }\n\n  async listTools(\n    serverId: string,\n    params?: Parameters<Client[\"listTools\"]>[0],\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    try {\n      const result = await client.listTools(\n        params,\n        this.withTimeout(serverId, options),\n      );\n\n      const metadataMap = new Map<string, any>();\n      for (const tool of result.tools) {\n        if (tool._meta) {\n          metadataMap.set(tool.name, tool._meta);\n        }\n      }\n      this.toolsMetadataCache.set(serverId, metadataMap);\n\n      return result;\n    } catch (error) {\n      if (this.isMethodUnavailableError(error, \"tools/list\")) {\n        this.toolsMetadataCache.set(serverId, new Map());\n        return { tools: [] } as Awaited<ReturnType<Client[\"listTools\"]>>;\n      }\n      throw error;\n    }\n  }\n\n  async getTools(serverIds?: string[]): Promise<ListToolsResult> {\n    const targetServerIds =\n      serverIds && serverIds.length > 0 ? serverIds : this.listServers();\n\n    const toolLists = await Promise.all(\n      targetServerIds.map(async (serverId) => {\n        await this.ensureConnected(serverId);\n        const client = this.getClientById(serverId);\n        const result = await client.listTools(\n          undefined,\n          this.withTimeout(serverId),\n        );\n\n        const metadataMap = new Map<string, any>();\n        for (const tool of result.tools) {\n          if (tool._meta) {\n            metadataMap.set(tool.name, tool._meta);\n          }\n        }\n        this.toolsMetadataCache.set(serverId, metadataMap);\n\n        return result.tools;\n      }),\n    );\n\n    return { tools: toolLists.flat() };\n  }\n\n  getAllToolsMetadata(serverId: string): Record<string, Record<string, any>> {\n    const metadataMap = this.toolsMetadataCache.get(serverId);\n    return metadataMap ? Object.fromEntries(metadataMap) : {};\n  }\n\n  pingServer(serverId: string, options?: RequestOptions) {\n    const client = this.getClientById(serverId);\n    try {\n      client.ping(options);\n    } catch (error) {\n      throw new Error(\n        `Failed to ping MCP server \"${serverId}\": ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n    }\n  }\n\n  async executeTool(\n    serverId: string,\n    toolName: string,\n    args: ExecuteToolArguments = {},\n    options?: CallToolOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    return client.callTool(\n      {\n        name: toolName,\n        arguments: args,\n      },\n      CallToolResultSchema,\n      this.withTimeout(serverId, options),\n    );\n  }\n\n  async listResources(\n    serverId: string,\n    params?: ListResourcesParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    try {\n      return await client.listResources(\n        params,\n        this.withTimeout(serverId, options),\n      );\n    } catch (error) {\n      if (this.isMethodUnavailableError(error, \"resources/list\")) {\n        return {\n          resources: [],\n        } as Awaited<ReturnType<Client[\"listResources\"]>>;\n      }\n      throw error;\n    }\n  }\n\n  async readResource(\n    serverId: string,\n    params: ReadResourceParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    return client.readResource(params, this.withTimeout(serverId, options));\n  }\n\n  async subscribeResource(\n    serverId: string,\n    params: SubscribeResourceParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    return client.subscribeResource(\n      params,\n      this.withTimeout(serverId, options),\n    );\n  }\n\n  async unsubscribeResource(\n    serverId: string,\n    params: UnsubscribeResourceParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    return client.unsubscribeResource(\n      params,\n      this.withTimeout(serverId, options),\n    );\n  }\n\n  async listResourceTemplates(\n    serverId: string,\n    params?: ListResourceTemplatesParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    return client.listResourceTemplates(\n      params,\n      this.withTimeout(serverId, options),\n    );\n  }\n\n  async listPrompts(\n    serverId: string,\n    params?: ListPromptsParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    try {\n      return await client.listPrompts(\n        params,\n        this.withTimeout(serverId, options),\n      );\n    } catch (error) {\n      if (this.isMethodUnavailableError(error, \"prompts/list\")) {\n        return {\n          prompts: [],\n        } as Awaited<ReturnType<Client[\"listPrompts\"]>>;\n      }\n      throw error;\n    }\n  }\n\n  async getPrompt(\n    serverId: string,\n    params: GetPromptParams,\n    options?: ClientRequestOptions,\n  ) {\n    await this.ensureConnected(serverId);\n    const client = this.getClientById(serverId);\n    return client.getPrompt(params, this.withTimeout(serverId, options));\n  }\n\n  getSessionIdByServer(serverId: string): string | undefined {\n    const state = this.clientStates.get(serverId);\n    if (!state?.transport) {\n      throw new Error(`Unknown MCP server \"${serverId}\".`);\n    }\n    if (state.transport instanceof StreamableHTTPClientTransport) {\n      return state.transport.sessionId;\n    }\n    throw new Error(\n      `Server \"${serverId}\" must be Streamable HTTP to get the session ID.`,\n    );\n  }\n\n  addNotificationHandler(\n    serverId: string,\n    schema: NotificationSchema,\n    handler: NotificationHandler,\n  ): void {\n    const serverHandlers = this.notificationHandlers.get(serverId) ?? new Map();\n    const handlersForSchema =\n      serverHandlers.get(schema) ?? new Set<NotificationHandler>();\n    handlersForSchema.add(handler);\n    serverHandlers.set(schema, handlersForSchema);\n    this.notificationHandlers.set(serverId, serverHandlers);\n\n    const client = this.clientStates.get(serverId)?.client;\n    if (client) {\n      client.setNotificationHandler(\n        schema,\n        this.createNotificationDispatcher(serverId, schema),\n      );\n    }\n  }\n\n  onResourceListChanged(serverId: string, handler: NotificationHandler): void {\n    this.addNotificationHandler(\n      serverId,\n      ResourceListChangedNotificationSchema,\n      handler,\n    );\n  }\n\n  onResourceUpdated(serverId: string, handler: NotificationHandler): void {\n    this.addNotificationHandler(\n      serverId,\n      ResourceUpdatedNotificationSchema,\n      handler,\n    );\n  }\n\n  onPromptListChanged(serverId: string, handler: NotificationHandler): void {\n    this.addNotificationHandler(\n      serverId,\n      PromptListChangedNotificationSchema,\n      handler,\n    );\n  }\n\n  getClient(serverId: string): Client | undefined {\n    return this.clientStates.get(serverId)?.client;\n  }\n\n  setElicitationHandler(serverId: string, handler: ElicitationHandler): void {\n    if (!this.clientStates.has(serverId)) {\n      throw new Error(`Unknown MCP server \"${serverId}\".`);\n    }\n\n    this.elicitationHandlers.set(serverId, handler);\n\n    const client = this.clientStates.get(serverId)?.client;\n    if (client) {\n      this.applyElicitationHandler(serverId, client);\n    }\n  }\n\n  clearElicitationHandler(serverId: string): void {\n    this.elicitationHandlers.delete(serverId);\n    const client = this.clientStates.get(serverId)?.client;\n    if (client) {\n      client.removeRequestHandler(\"elicitation/create\");\n    }\n  }\n\n  private async connectViaStdio(\n    client: Client,\n    config: StdioServerConfig,\n    timeout: number,\n  ): Promise<Transport> {\n    const transport = new StdioClientTransport({\n      command: config.command,\n      args: config.args,\n      env: { ...getDefaultEnvironment(), ...(config.env ?? {}) },\n    });\n    await client.connect(transport, { timeout });\n    return transport;\n  }\n\n  private async connectViaHttp(\n    serverId: string,\n    client: Client,\n    config: HttpServerConfig,\n    timeout: number,\n  ): Promise<Transport> {\n    const preferSSE = config.preferSSE ?? config.url.pathname.endsWith(\"/sse\");\n    let streamableError: unknown;\n\n    if (!preferSSE) {\n      const streamableTransport = new StreamableHTTPClientTransport(\n        config.url,\n        {\n          requestInit: config.requestInit,\n          reconnectionOptions: config.reconnectionOptions,\n          authProvider: config.authProvider,\n          sessionId: config.sessionId,\n        },\n      );\n\n      try {\n        await client.connect(streamableTransport, {\n          timeout: Math.min(timeout, 3000),\n        });\n        return streamableTransport;\n      } catch (error) {\n        streamableError = error;\n        await this.safeCloseTransport(streamableTransport);\n      }\n    }\n\n    const sseTransport = new SSEClientTransport(config.url, {\n      requestInit: config.requestInit,\n      eventSourceInit: config.eventSourceInit,\n      authProvider: config.authProvider,\n    });\n\n    try {\n      await client.connect(sseTransport, { timeout });\n      return sseTransport;\n    } catch (error) {\n      await this.safeCloseTransport(sseTransport);\n      const streamableMessage = streamableError\n        ? ` Streamable HTTP error: ${this.formatError(streamableError)}.`\n        : \"\";\n      throw new Error(\n        `Failed to connect to MCP server \"${serverId}\" using HTTP transports.${streamableMessage} SSE error: ${this.formatError(error)}.`,\n      );\n    }\n  }\n\n  private async safeCloseTransport(transport: Transport): Promise<void> {\n    try {\n      await transport.close();\n    } catch {\n      // Ignore close errors during cleanup.\n    }\n  }\n\n  private applyNotificationHandlers(serverId: string, client: Client): void {\n    const serverHandlers = this.notificationHandlers.get(serverId);\n    if (!serverHandlers) {\n      return;\n    }\n\n    for (const [schema] of serverHandlers) {\n      client.setNotificationHandler(\n        schema,\n        this.createNotificationDispatcher(serverId, schema),\n      );\n    }\n  }\n\n  private createNotificationDispatcher(\n    serverId: string,\n    schema: NotificationSchema,\n  ): NotificationHandler {\n    return (notification) => {\n      const serverHandlers = this.notificationHandlers.get(serverId);\n      const handlersForSchema = serverHandlers?.get(schema);\n      if (!handlersForSchema || handlersForSchema.size === 0) {\n        return;\n      }\n      for (const handler of handlersForSchema) {\n        try {\n          handler(notification);\n        } catch {\n          // Swallow individual handler errors to avoid breaking other listeners.\n        }\n      }\n    };\n  }\n\n  private applyElicitationHandler(serverId: string, client: Client): void {\n    const handler = this.elicitationHandlers.get(serverId);\n    if (!handler) {\n      return;\n    }\n\n    client.setRequestHandler(ElicitRequestSchema, async (request) =>\n      handler(request.params),\n    );\n  }\n\n  private async ensureConnected(serverId: string): Promise<void> {\n    const state = this.clientStates.get(serverId);\n    if (state?.client) {\n      return;\n    }\n\n    if (!state) {\n      throw new Error(`Unknown MCP server \"${serverId}\".`);\n    }\n    if (state.promise) {\n      await state.promise;\n      return;\n    }\n    await this.connectToServer(serverId, state.config);\n  }\n\n  private resetState(serverId: string): void {\n    this.clientStates.delete(serverId);\n    this.toolsMetadataCache.delete(serverId);\n  }\n\n  private resolveConnectionStatus(\n    state: ManagedClientState | undefined,\n  ): MCPConnectionStatus {\n    if (!state) {\n      return \"disconnected\";\n    }\n    if (state.client) {\n      return \"connected\";\n    }\n    if (state.promise) {\n      return \"connecting\";\n    }\n    return \"disconnected\";\n  }\n\n  private withTimeout(\n    serverId: string,\n    options?: RequestOptions,\n  ): RequestOptions {\n    const state = this.clientStates.get(serverId);\n    const timeout =\n      state?.timeout ??\n      (state ? this.getTimeout(state.config) : this.defaultTimeout);\n\n    if (!options) {\n      return { timeout };\n    }\n\n    if (options.timeout === undefined) {\n      return { ...options, timeout };\n    }\n\n    return options;\n  }\n\n  private buildCapabilities(config: MCPServerConfig): ClientCapabilityOptions {\n    const capabilities: ClientCapabilityOptions = {\n      ...this.defaultCapabilities,\n      ...(config.capabilities ?? {}),\n    };\n\n    if (!capabilities.elicitation) {\n      capabilities.elicitation = {};\n    }\n\n    return capabilities;\n  }\n\n  private formatError(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n\n    try {\n      return JSON.stringify(error);\n    } catch {\n      return String(error);\n    }\n  }\n\n  private isMethodUnavailableError(error: unknown, method: string): boolean {\n    if (!(error instanceof Error)) {\n      return false;\n    }\n    const message = error.message.toLowerCase();\n    const methodTokens = new Set<string>();\n    const pushToken = (token: string) => {\n      if (token) {\n        methodTokens.add(token.toLowerCase());\n      }\n    };\n\n    pushToken(method);\n    for (const part of method.split(/[\\/:._-]/)) {\n      pushToken(part);\n    }\n    const indicators = [\n      \"method not found\",\n      \"not implemented\",\n      \"unsupported\",\n      \"does not support\",\n      \"unimplemented\",\n    ];\n    const indicatorMatch = indicators.some((indicator) =>\n      message.includes(indicator),\n    );\n    if (!indicatorMatch) {\n      return false;\n    }\n\n    if (Array.from(methodTokens).some((token) => message.includes(token))) {\n      return true;\n    }\n\n    return true;\n  }\n\n  private getTimeout(config: MCPServerConfig): number {\n    return config.timeout ?? this.defaultTimeout;\n  }\n\n  private isStdioConfig(config: MCPServerConfig): config is StdioServerConfig {\n    return \"command\" in config;\n  }\n\n  private getClientById(serverId: string): Client {\n    const state = this.clientStates.get(serverId);\n    if (!state?.client) {\n      throw new Error(`MCP server \"${serverId}\" is not connected.`);\n    }\n    return state.client;\n  }\n}\n\nexport type MCPPromptListResult = Awaited<\n  ReturnType<MCPClientManager[\"listPrompts\"]>\n>;\nexport type MCPPrompt = MCPPromptListResult[\"prompts\"][number];\nexport type MCPGetPromptResult = Awaited<\n  ReturnType<MCPClientManager[\"getPrompt\"]>\n>;\nexport type MCPResourceListResult = Awaited<\n  ReturnType<MCPClientManager[\"listResources\"]>\n>;\nexport type MCPResource = MCPResourceListResult[\"resources\"][number];\nexport type MCPReadResourceResult = Awaited<\n  ReturnType<MCPClientManager[\"readResource\"]>\n>;\nexport type MCPServerSummary = ServerSummary;\n"],"mappings":"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","names":["_a"]}