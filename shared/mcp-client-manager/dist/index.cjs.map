{"version":3,"sources":["../index.ts"],"sourcesContent":["import { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport type { ClientOptions } from '@modelcontextprotocol/sdk/client/index.js';\nimport { SSEClientTransport } from '@modelcontextprotocol/sdk/client/sse.js';\nimport type { SSEClientTransportOptions } from '@modelcontextprotocol/sdk/client/sse.js';\nimport { getDefaultEnvironment, StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';\nimport { StreamableHTTPClientTransport } from '@modelcontextprotocol/sdk/client/streamableHttp.js';\nimport type { StreamableHTTPClientTransportOptions } from '@modelcontextprotocol/sdk/client/streamableHttp.js';\nimport { DEFAULT_REQUEST_TIMEOUT_MSEC } from '@modelcontextprotocol/sdk/shared/protocol.js';\nimport type { RequestOptions } from '@modelcontextprotocol/sdk/shared/protocol.js';\nimport type { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';\nimport {\n  CallToolResultSchema,\n  ElicitRequestSchema,\n  ResourceListChangedNotificationSchema,\n  ResourceUpdatedNotificationSchema,\n  PromptListChangedNotificationSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport type { ElicitRequest, ElicitResult } from '@modelcontextprotocol/sdk/types.js';\ntype ClientCapabilityOptions = NonNullable<ClientOptions['capabilities']>;\n\ntype BaseServerConfig = {\n  capabilities?: ClientCapabilityOptions;\n  timeout?: number;\n  version?: string;\n  onError?: (error: unknown) => void;\n};\n\ntype StdioServerConfig = BaseServerConfig & {\n  command: string;\n  args?: string[];\n  env?: Record<string, string>;\n\n  url?: never;\n  requestInit?: never;\n  eventSourceInit?: never;\n  authProvider?: never;\n  reconnectionOptions?: never;\n  sessionId?: never;\n  preferSSE?: never;\n};\n\ntype HttpServerConfig = BaseServerConfig & {\n  url: URL;\n  requestInit?: StreamableHTTPClientTransportOptions['requestInit'];\n  eventSourceInit?: SSEClientTransportOptions['eventSourceInit'];\n  authProvider?: StreamableHTTPClientTransportOptions['authProvider'];\n  reconnectionOptions?: StreamableHTTPClientTransportOptions['reconnectionOptions'];\n  sessionId?: StreamableHTTPClientTransportOptions['sessionId'];\n  preferSSE?: boolean;\n\n  command?: never;\n  args?: never;\n  env?: never;\n};\n\nexport type MCPServerConfig = StdioServerConfig | HttpServerConfig;\n\nexport type MCPClientManagerConfig = Record<string, MCPServerConfig>;\n\ntype NotificationSchema = Parameters<Client['setNotificationHandler']>[0];\ntype NotificationHandler = Parameters<Client['setNotificationHandler']>[1];\n\ninterface NotificationHandlerEntry {\n  schema: NotificationSchema;\n  handler: NotificationHandler;\n}\n\ninterface ManagedClientState {\n  config: MCPServerConfig;\n  client: Client;\n  transport: Transport;\n  timeout: number;\n}\n\ninterface PendingClientState {\n  config: MCPServerConfig;\n  timeout: number;\n  promise: Promise<Client>;\n}\n\ntype ClientRequestOptions = RequestOptions;\ntype CallToolOptions = RequestOptions;\n\ntype ListResourcesParams = Parameters<Client['listResources']>[0];\ntype ListResourceTemplatesParams = Parameters<Client['listResourceTemplates']>[0];\ntype ReadResourceParams = Parameters<Client['readResource']>[0];\ntype SubscribeResourceParams = Parameters<Client['subscribeResource']>[0];\ntype UnsubscribeResourceParams = Parameters<Client['unsubscribeResource']>[0];\ntype ListPromptsParams = Parameters<Client['listPrompts']>[0];\ntype GetPromptParams = Parameters<Client['getPrompt']>[0];\ntype ListToolsResult = Awaited<ReturnType<Client['listTools']>>;\n\nexport type ExecuteToolArguments = Record<string, unknown>;\nexport type ElicitationHandler = (\n  params: ElicitRequest['params'],\n) => Promise<ElicitResult> | ElicitResult;\n\nexport class MCPClientManager {\n  private readonly clientStates = new Map<string, ManagedClientState>();\n  private readonly pendingConnections = new Map<string, PendingClientState>();\n  private readonly serverConfigs = new Map<string, MCPServerConfig>();\n  private readonly notificationHandlers = new Map<string, NotificationHandlerEntry[]>();\n  private readonly elicitationHandlers = new Map<string, ElicitationHandler>();\n  private readonly defaultClientVersion: string;\n  private readonly defaultCapabilities: ClientCapabilityOptions;\n  private readonly defaultTimeout: number;\n\n  constructor(\n    servers: MCPClientManagerConfig = {},\n    options: {\n      defaultClientVersion?: string;\n      defaultCapabilities?: ClientCapabilityOptions;\n      defaultTimeout?: number;\n    } = {},\n  ) {\n    this.defaultClientVersion = options.defaultClientVersion ?? '1.0.0';\n    this.defaultCapabilities = { ...(options.defaultCapabilities ?? {}) };\n    this.defaultTimeout = options.defaultTimeout ?? DEFAULT_REQUEST_TIMEOUT_MSEC;\n\n    for (const [name, config] of Object.entries(servers)) {\n      void this.connectToServer(name, config);\n    }\n  }\n\n  listServers(): string[] {\n    return Array.from(this.serverConfigs.keys());\n  }\n\n  hasServer(name: string): boolean {\n    const serverName = this.normalizeName(name);\n    return this.serverConfigs.has(serverName);\n  }\n\n  async connectToServer(name: string, config: MCPServerConfig): Promise<Client> {\n    const serverName = this.normalizeName(name);\n    this.serverConfigs.set(serverName, config);\n\n    const timeout = this.getTimeout(config);\n    const existingState = this.clientStates.get(serverName);\n\n    if (existingState) {\n      existingState.config = config;\n      existingState.timeout = timeout;\n      this.clientStates.set(serverName, existingState);\n      return existingState.client;\n    }\n\n    const pendingState = this.pendingConnections.get(serverName);\n    if (pendingState) {\n      pendingState.config = config;\n      pendingState.timeout = timeout;\n      return pendingState.promise;\n    }\n\n    const connectionPromise = (async () => {\n      const client = new Client(\n        {\n          name: serverName,\n          version: config.version ?? this.defaultClientVersion,\n        },\n        {\n          capabilities: this.buildCapabilities(config),\n        },\n      );\n\n      this.applyNotificationHandlers(serverName, client);\n      this.applyElicitationHandler(serverName, client);\n\n      if (config.onError) {\n        client.onerror = error => {\n          config.onError?.(error);\n        };\n      }\n\n      client.onclose = () => {\n        this.resetState(serverName, { preserveConfig: true });\n      };\n\n      let transport: Transport;\n      if (this.isStdioConfig(config)) {\n        transport = await this.connectViaStdio(client, config, timeout);\n      } else {\n        transport = await this.connectViaHttp(serverName, client, config, timeout);\n      }\n\n      const managedState: ManagedClientState = {\n        config,\n        client,\n        transport,\n        timeout,\n      };\n\n      this.clientStates.set(serverName, managedState);\n      this.pendingConnections.delete(serverName);\n\n      return client;\n    })().catch(error => {\n      this.pendingConnections.delete(serverName);\n      this.clientStates.delete(serverName);\n      throw error;\n    });\n\n    this.pendingConnections.set(serverName, { config, timeout, promise: connectionPromise });\n    return connectionPromise;\n  }\n\n  async disconnectServer(name: string): Promise<void> {\n    const serverName = this.normalizeName(name);\n    const pending = this.pendingConnections.get(serverName);\n\n    if (pending) {\n      try {\n        await pending.promise;\n      } catch {\n        // Ignore connection errors during shutdown; state cleanup happens below.\n      }\n    }\n\n    const state = this.clientStates.get(serverName);\n\n    if (!state) {\n      this.resetState(serverName, { preserveConfig: true });\n      return;\n    }\n\n    try {\n      await state.client.close();\n    } finally {\n      await this.safeCloseTransport(state.transport);\n      this.resetState(serverName, { preserveConfig: true });\n    }\n  }\n\n  async disconnectAllServers(): Promise<void> {\n    const serverNames = this.listServers();\n    await Promise.all(serverNames.map(name => this.disconnectServer(name)));\n\n    for (const name of serverNames) {\n      const serverName = this.normalizeName(name);\n      this.resetState(serverName, { preserveConfig: false });\n      this.notificationHandlers.delete(serverName);\n      this.elicitationHandlers.delete(serverName);\n    }\n  }\n\n  async listTools(name: string, params?: Parameters<Client['listTools']>[0], options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.listTools(params, this.withTimeout(serverName, options));\n  }\n\n  async getTools(names?: string[]): Promise<ListToolsResult> {\n    const targetNames = names && names.length > 0 ? names.map(name => this.normalizeName(name)) : this.listServers();\n    const uniqueNames = Array.from(new Set(targetNames));\n\n    const toolLists = await Promise.all(\n      uniqueNames.map(async serverName => {\n        await this.ensureConnected(serverName);\n        const client = this.getClientByName(serverName);\n        const result = await client.listTools(undefined, this.withTimeout(serverName));\n        return result.tools;\n      }),\n    );\n\n    return { tools: toolLists.flat() };\n  }\n\n  async executeTool(name: string, toolName: string, args: ExecuteToolArguments = {}, options?: CallToolOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.callTool(\n      {\n        name: toolName,\n        arguments: args,\n      },\n      CallToolResultSchema,\n      this.withTimeout(serverName, options),\n    );\n  }\n\n  async listResources(name: string, params?: ListResourcesParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.listResources(params, this.withTimeout(serverName, options));\n  }\n\n  async readResource(name: string, params: ReadResourceParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.readResource(params, this.withTimeout(serverName, options));\n  }\n\n  async subscribeResource(name: string, params: SubscribeResourceParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.subscribeResource(params, this.withTimeout(serverName, options));\n  }\n\n  async unsubscribeResource(name: string, params: UnsubscribeResourceParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.unsubscribeResource(params, this.withTimeout(serverName, options));\n  }\n\n  async listResourceTemplates(name: string, params?: ListResourceTemplatesParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.listResourceTemplates(params, this.withTimeout(serverName, options));\n  }\n\n  async listPrompts(name: string, params?: ListPromptsParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.listPrompts(params, this.withTimeout(serverName, options));\n  }\n\n  async getPrompt(name: string, params: GetPromptParams, options?: ClientRequestOptions) {\n    const serverName = this.normalizeName(name);\n    await this.ensureConnected(serverName);\n    const client = this.getClientByName(serverName);\n    return client.getPrompt(params, this.withTimeout(serverName, options));\n  }\n\n  getSessionIdByServer(name: string): string | undefined {\n    const state = this.clientStates.get(this.normalizeName(name));\n    if (!state?.transport) {\n      throw new Error(`Unknown MCP server \"${name}\".`);\n    }\n    if (state.transport instanceof StreamableHTTPClientTransport) {\n      return state.transport.sessionId;\n    }\n    throw new Error(`Server \"${name}\" must be Streamable HTTP to get the session ID.`);\n  }\n\n  addNotificationHandler(name: string, schema: NotificationSchema, handler: NotificationHandler): void {\n    const serverName = this.normalizeName(name);\n    const handlers = this.notificationHandlers.get(serverName) ?? [];\n    handlers.push({ schema, handler });\n    this.notificationHandlers.set(serverName, handlers);\n\n    const client = this.clientStates.get(serverName)?.client;\n    if (client) {\n      client.setNotificationHandler(schema, handler);\n    }\n  }\n\n  onResourceListChanged(name: string, handler: NotificationHandler): void {\n    this.addNotificationHandler(name, ResourceListChangedNotificationSchema, handler);\n  }\n\n  onResourceUpdated(name: string, handler: NotificationHandler): void {\n    this.addNotificationHandler(name, ResourceUpdatedNotificationSchema, handler);\n  }\n\n  onPromptListChanged(name: string, handler: NotificationHandler): void {\n    this.addNotificationHandler(name, PromptListChangedNotificationSchema, handler);\n  }\n\n  getClient(name: string): Client | undefined {\n    return this.clientStates.get(this.normalizeName(name))?.client;\n  }\n\n  setElicitationHandler(name: string, handler: ElicitationHandler): void {\n    const serverName = this.normalizeName(name);\n    if (!this.serverConfigs.has(serverName)) {\n      throw new Error(`Unknown MCP server \"${serverName}\".`);\n    }\n\n    this.elicitationHandlers.set(serverName, handler);\n\n    const client = this.clientStates.get(serverName)?.client;\n    if (client) {\n      this.applyElicitationHandler(serverName, client);\n    }\n  }\n\n  clearElicitationHandler(name: string): void {\n    const serverName = this.normalizeName(name);\n    this.elicitationHandlers.delete(serverName);\n    const client = this.clientStates.get(serverName)?.client;\n    if (client) {\n      client.removeRequestHandler('elicitation/create');\n    }\n  }\n\n  private async connectViaStdio(client: Client, config: StdioServerConfig, timeout: number): Promise<Transport> {\n    const transport = new StdioClientTransport({\n      command: config.command,\n      args: config.args,\n      env: { ...getDefaultEnvironment(), ...(config.env ?? {}) },\n    });\n    await client.connect(transport, { timeout });\n    return transport;\n  }\n\n  private async connectViaHttp(serverName: string, client: Client, config: HttpServerConfig, timeout: number): Promise<Transport> {\n    const preferSSE = config.preferSSE ?? config.url.pathname.endsWith('/sse');\n    let streamableError: unknown;\n\n    if (!preferSSE) {\n      const streamableTransport = new StreamableHTTPClientTransport(config.url, {\n        requestInit: config.requestInit,\n        reconnectionOptions: config.reconnectionOptions,\n        authProvider: config.authProvider,\n        sessionId: config.sessionId,\n      });\n\n      try {\n        await client.connect(streamableTransport, { timeout: Math.min(timeout, 3000) });\n        return streamableTransport;\n      } catch (error) {\n        streamableError = error;\n        await this.safeCloseTransport(streamableTransport);\n      }\n    }\n\n    const sseTransport = new SSEClientTransport(config.url, {\n      requestInit: config.requestInit,\n      eventSourceInit: config.eventSourceInit,\n      authProvider: config.authProvider,\n    });\n\n    try {\n      await client.connect(sseTransport, { timeout });\n      return sseTransport;\n    } catch (error) {\n      await this.safeCloseTransport(sseTransport);\n      const streamableMessage = streamableError\n        ? ` Streamable HTTP error: ${this.formatError(streamableError)}.`\n        : '';\n      throw new Error(\n        `Failed to connect to MCP server \"${serverName}\" using HTTP transports.${streamableMessage} SSE error: ${this.formatError(error)}.`,\n      );\n    }\n  }\n\n  private async safeCloseTransport(transport: Transport): Promise<void> {\n    try {\n      await transport.close();\n    } catch {\n      // Ignore close errors during cleanup.\n    }\n  }\n\n  private applyNotificationHandlers(serverName: string, client: Client): void {\n    const handlers = this.notificationHandlers.get(serverName);\n    if (!handlers) {\n      return;\n    }\n\n    for (const { schema, handler } of handlers) {\n      client.setNotificationHandler(schema, handler);\n    }\n  }\n\n  private applyElicitationHandler(serverName: string, client: Client): void {\n    const handler = this.elicitationHandlers.get(serverName);\n    if (!handler) {\n      return;\n    }\n\n    client.setRequestHandler(ElicitRequestSchema, async request => handler(request.params));\n  }\n\n  private async ensureConnected(name: string): Promise<void> {\n    const serverName = this.normalizeName(name);\n\n    if (this.clientStates.has(serverName)) {\n      return;\n    }\n\n    const pending = this.pendingConnections.get(serverName);\n    if (pending) {\n      await pending.promise;\n      return;\n    }\n\n    const config = this.serverConfigs.get(serverName);\n    if (!config) {\n      throw new Error(`Unknown MCP server \"${serverName}\".`);\n    }\n\n    await this.connectToServer(serverName, config);\n  }\n\n  private resetState(name: string, options: { preserveConfig: boolean }): void {\n    const serverName = this.normalizeName(name);\n    this.pendingConnections.delete(serverName);\n    this.clientStates.delete(serverName);\n\n    if (!options.preserveConfig) {\n      this.serverConfigs.delete(serverName);\n    }\n  }\n\n  private withTimeout(name: string, options?: RequestOptions): RequestOptions {\n    const serverName = this.normalizeName(name);\n    const connectedState = this.clientStates.get(serverName);\n    const serverConfig = this.serverConfigs.get(serverName);\n    const timeout = connectedState?.timeout ?? (serverConfig ? this.getTimeout(serverConfig) : this.defaultTimeout);\n\n    if (!options) {\n      return { timeout };\n    }\n\n    if (options.timeout === undefined) {\n      return { ...options, timeout };\n    }\n\n    return options;\n  }\n\n  private buildCapabilities(config: MCPServerConfig): ClientCapabilityOptions {\n    const capabilities: ClientCapabilityOptions = {\n      ...this.defaultCapabilities,\n      ...(config.capabilities ?? {}),\n    };\n\n    if (!capabilities.elicitation) {\n      capabilities.elicitation = {};\n    }\n\n    return capabilities;\n  }\n\n  private formatError(error: unknown): string {\n    if (error instanceof Error) {\n      return error.message;\n    }\n\n    try {\n      return JSON.stringify(error);\n    } catch {\n      return String(error);\n    }\n  }\n\n  private getTimeout(config: MCPServerConfig): number {\n    return config.timeout ?? this.defaultTimeout;\n  }\n\n  private isStdioConfig(config: MCPServerConfig): config is StdioServerConfig {\n    return 'command' in config;\n  }\n\n  private normalizeName(name: string): string {\n    const normalized = name.trim();\n    if (!normalized) {\n      throw new Error('Server name must be a non-empty string.');\n    }\n    return normalized;\n  }\n\n  private getClientByName(name: string): Client {\n    const serverName = this.normalizeName(name);\n    const state = this.clientStates.get(serverName);\n    if (!state) {\n      throw new Error(`MCP server \"${serverName}\" is not connected.`);\n    }\n    return state.client;\n  }\n}\n"],"mappings":"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","names":["_a"]}